import { useState, useEffect, useCallback, useReducer } from 'react';

export interface CSVStructure {
  [city: string]: {
    [shop: string]: string[];
  };
}

interface State {
  structure: CSVStructure;
  selectedCity: string | null;
  selectedShop: string | null;
  selectedFile: string | null;
  data: any[];
  headers: string[];
  loading: boolean;
  error: string | null;
}

type Action = 
  | { type: 'SET_STRUCTURE'; payload: CSVStructure }
  | { type: 'SET_CITY'; payload: string }
  | { type: 'SET_SHOP'; payload: string }
  | { type: 'SET_FILE'; payload: string }
  | { type: 'SET_LOADING'; payload: boolean }
  | { type: 'SET_ERROR'; payload: string | null }
  | { type: 'SET_DATA'; payload: { data: any[]; headers: string[] } }
  | { type: 'CLEAR_DATA' };

const initialState: State = {
  structure: {},
  selectedCity: null,
  selectedShop: null,
  selectedFile: null,
  data: [],
  headers: [],
  loading: false,
  error: null,
};

function reducer(state: State, action: Action): State {
  switch (action.type) {
    case 'SET_STRUCTURE': {
      const structure = action.payload;
      const cities = Object.keys(structure);
      let newCity = state.selectedCity;
      let newShop = null;
      let newFile = null;

      // If no city selected or current city doesn't exist in new structure, select first available
      if (!newCity || !structure[newCity]) {
        newCity = cities.length > 0 ? cities[0] : null;
      }

      // If city is selected, get first available shop
      if (newCity && structure[newCity]) {
        const shops = Object.keys(structure[newCity]);
        newShop = shops.length > 0 ? shops[0] : null;

        // If shop is selected, get first available file
        if (newShop && structure[newCity][newShop]) {
          const files = structure[newCity][newShop];
          newFile = files.length > 0 ? files[0] : null;
        }
      }

      return {
        ...state,
        structure,
        selectedCity: newCity,
        selectedShop: newShop,
        selectedFile: newFile,
      };
    }

    case 'SET_CITY': {
      const city = action.payload;
      const { structure } = state;
      let newShop = null;
      let newFile = null;

      // Get first available shop for this city
      if (city && structure[city]) {
        const shops = Object.keys(structure[city]);
        newShop = shops.length > 0 ? shops[0] : null;

        // Get first available file for this shop
        if (newShop && structure[city][newShop]) {
          const files = structure[city][newShop];
          newFile = files.length > 0 ? files[0] : null;
        }
      }

      return {
        ...state,
        selectedCity: city,
        selectedShop: newShop,
        selectedFile: newFile,
        data: [],
        headers: [],
        error: null,
      };
    }

    case 'SET_SHOP': {
      const shop = action.payload;
      const { structure, selectedCity } = state;
      let newFile = null;

      // Get first available file for this city/shop combination
      if (selectedCity && shop && structure[selectedCity]?.[shop]) {
        const files = structure[selectedCity][shop];
        newFile = files.length > 0 ? files[0] : null;
      }

      return {
        ...state,
        selectedShop: shop,
        selectedFile: newFile,
        data: [],
        headers: [],
        error: null,
      };
    }

    case 'SET_FILE': {
      return {
        ...state,
        selectedFile: action.payload,
        data: [],
        headers: [],
        error: null,
      };
    }

    case 'SET_LOADING': {
      return {
        ...state,
        loading: action.payload,
      };
    }

    case 'SET_ERROR': {
      return {
        ...state,
        error: action.payload,
        loading: false,
      };
    }

    case 'SET_DATA': {
      return {
        ...state,
        data: action.payload.data,
        headers: action.payload.headers,
        loading: false,
        error: null,
      };
    }

    case 'CLEAR_DATA': {
      return {
        ...state,
        data: [],
        headers: [],
      };
    }

    default:
      return state;
  }
}

export const useHierarchicalCSVData = () => {
  const [state, dispatch] = useReducer(reducer, initialState);

  // Fetch the CSV structure
  useEffect(() => {
    const fetchStructure = async () => {
      try {
        dispatch({ type: 'SET_LOADING', payload: true });
        const response = await fetch('/api/csv-structure');
        if (!response.ok) {
          throw new Error('Failed to fetch CSV structure');
        }
        const data = await response.json();
        dispatch({ type: 'SET_STRUCTURE', payload: data.cities });
        dispatch({ type: 'SET_LOADING', payload: false });
      } catch (err) {
        dispatch({ type: 'SET_ERROR', payload: err instanceof Error ? err.message : 'An unknown error occurred' });
      }
    };

    fetchStructure();
  }, []);

  // Fetch CSV data function
  const fetchCSVData = useCallback(async (city: string, shop: string, file: string) => {
    // Validate that the combination exists in structure
    if (!state.structure[city]?.[shop]?.includes(file)) {
      dispatch({ type: 'SET_ERROR', payload: 'Invalid city/shop/file combination' });
      return;
    }

    try {
      dispatch({ type: 'SET_LOADING', payload: true });
      dispatch({ type: 'SET_ERROR', payload: null });
      
      const response = await fetch(`/api/csv-data?city=${encodeURIComponent(city)}&shop=${encodeURIComponent(shop)}&file=${encodeURIComponent(file)}`);
      if (!response.ok) {
        throw new Error('Failed to fetch CSV data');
      }
      const result = await response.json();
      dispatch({ type: 'SET_DATA', payload: { data: result.data, headers: result.headers } });
    } catch (err) {
      dispatch({ type: 'SET_ERROR', payload: err instanceof Error ? err.message : 'An unknown error occurred' });
    }
  }, [state.structure]);

  // Fetch data when city/shop/file combination changes
  useEffect(() => {
    if (!state.selectedCity || !state.selectedShop || !state.selectedFile) {
      dispatch({ type: 'CLEAR_DATA' });
      return;
    }

    // Only fetch if the combination is valid
    if (state.structure[state.selectedCity]?.[state.selectedShop]?.includes(state.selectedFile)) {
      fetchCSVData(state.selectedCity, state.selectedShop, state.selectedFile);
    }
  }, [state.selectedCity, state.selectedShop, state.selectedFile, fetchCSVData]);

  // Refresh function to re-fetch current data
  const refreshData = useCallback(() => {
    if (state.selectedCity && state.selectedShop && state.selectedFile) {
      fetchCSVData(state.selectedCity, state.selectedShop, state.selectedFile);
    }
  }, [state.selectedCity, state.selectedShop, state.selectedFile, fetchCSVData]);

  // Custom setters that handle cascading updates properly
  const setSelectedCity = useCallback((city: string) => {
    dispatch({ type: 'SET_CITY', payload: city });
  }, []);

  const setSelectedShop = useCallback((shop: string) => {
    dispatch({ type: 'SET_SHOP', payload: shop });
  }, []);

  const setSelectedFile = useCallback((file: string) => {
    dispatch({ type: 'SET_FILE', payload: file });
  }, []);

  // Get available cities
  const cities = Object.keys(state.structure);

  // Get available shops for selected city
  const shops = state.selectedCity && state.structure[state.selectedCity] 
    ? Object.keys(state.structure[state.selectedCity]) 
    : [];

  // Get available files for selected city and shop
  const files = state.selectedCity && state.selectedShop && state.structure[state.selectedCity]?.[state.selectedShop] 
    ? state.structure[state.selectedCity][state.selectedShop] 
    : [];

  return {
    structure: state.structure,
    cities,
    shops,
    files,
    selectedCity: state.selectedCity,
    selectedShop: state.selectedShop,
    selectedFile: state.selectedFile,
    setSelectedCity,
    setSelectedShop,
    setSelectedFile,
    data: state.data,
    headers: state.headers,
    loading: state.loading,
    error: state.error,
    refreshData
  };
}; 